Do that which you feel like doing!

<code>Does this link work? [[Main Page]]</code>

<pre>How 'bout this one? [[Main Page]]</pre>

{{Question | What are the terms of the Gobo Proprietary License? }}

This is a test to see whether I can /fix/the/kill problem

== CompressAndBuildISO conflicts ==
* Installing GDB 6.4...
** Conflict: /Depot/Gobo-013/Output/ROLayer/Programs/BinUtils/2.16.1/lib/libopcodes.la
** Conflict: /Depot/Gobo-013/Output/ROLayer/Programs/BinUtils/2.16.1/lib/libopcodes.a
** Conflict: /Depot/Gobo-013/Output/ROLayer/Programs/BinUtils/2.16.1/lib/libiberty.a
** Conflict: /Depot/Gobo-013/Output/ROLayer/Programs/BinUtils/2.16.1/lib/libbfd.a
** Conflict: /Depot/Gobo-013/Output/ROLayer/Programs/BinUtils/2.16.1/lib/libbfd.la
** Conflict: /Depot/Gobo-013/Output/ROLayer/Programs/BinUtils/2.16.1/include/bfd.h
** Conflict: /Depot/Gobo-013/Output/ROLayer/Programs/BinUtils/2.16.1/include/dis-asm.h
** Conflict: /Depot/Gobo-013/Output/ROLayer/Programs/BinUtils/2.16.1/include/symcat.h
** Conflict: /Depot/Gobo-013/Output/ROLayer/Programs/BinUtils/2.16.1/include/ansidecl.h
** Conflict: /Depot/Gobo-013/Output/ROLayer/Programs/BinUtils/2.16.1/include/bfdlink.h

* Installing Man-Pages 2.33...
** Conflict: /Depot/Gobo-013/Output/ROLayer/Programs/DiffUtils/2.8.1/man/man1/diff.1
** Conflict: /Depot/Gobo-013/Output/ROLayer/Programs/GoboHide/20060712/man/man7/hier.7

* Installing Net-Tools 1.60...
** Conflict: /Depot/Gobo-013/Output/ROLayer/Programs/CoreUtils/5.96/bin/hostname

* Installing Procps 3.2.6...
** Conflict: /Depot/Gobo-013/Output/ROLayer/Programs/CoreUtils/5.96/bin<!--/-->kill
** Conflict: /Depot/Gobo-013/Output/ROLayer/Programs/CoreUtils/5.96/bin/uptime

* Installing Glibc 2.4...
** Conflict: /Depot/Gobo-013/Output/ROLayer/Programs/Linux-Headers/2.6.16.20/include/net/route.h
** Conflict: /Depot/Gobo-013/Output/ROLayer/Programs/Linux-Headers/2.6.16.20/include/scsi/sg.h
** Conflict: /Depot/Gobo-013/Output/ROLayer/Programs/Linux-Headers/2.6.16.20/include/scsi/scsi.h{{Question | why can't the kernel team and glibc teams play together? }}
** Conflict: /Depot/Gobo-013/Output/ROLayer/Programs/Linux-Headers/2.6.16.20/include/scsi/scsi_ioctl.h

* Installing Netkit-Base 0.17...
** Conflict: /Depot/Gobo-013/Output/ROLayer/Programs/InetUtils/1.4.2/bin/ping
** Conflict: /Depot/Gobo-013/Output/ROLayer/Programs/InetUtils/1.4.2/man/man8/ping.8
** Conflict: /Depot/Gobo-013/Output/ROLayer/Programs/InetUtils/1.4.2/man/man8/inetd.8

* Installing Shadow 4.0.16...
** Conflict: /Depot/Gobo-013/Output/ROLayer/Programs/CoreUtils/5.96/bin/su
** Conflict: /Depot/Gobo-013/Output/ROLayer/Programs/CoreUtils/5.96/bin/groups
** Conflict: /Depot/Gobo-013/Output/ROLayer/Programs/Man-Pages/2.33/man/man3/getspnam.3
** Conflict: /Depot/Gobo-013/Output/ROLayer/Programs/Man-Pages/2.33/man/man5/passwd.5

* Installing Sysklogd 1.4.1...
** Conflict: /Depot/Gobo-013/Output/ROLayer/Programs/InetUtils/1.4.2/man/man5/syslog.conf.5
** Conflict: /Depot/Gobo-013/Output/ROLayer/Programs/InetUtils/1.4.2/man/man8/syslogd.8

* Installing Util-Linux 2.12r...
** Conflict: /Depot/Gobo-013/Output/ROLayer/Programs/InetUtils/1.4.2/man/man1/logger.1
{{Question | what is logger? }}
* Installing Xorg 7.1...
** Conflict: /Depot/Gobo-013/Output/ROLayer/Programs/HwData/0.148-1/Shared/hwdata/Cards
** Conflict: /Depot/Gobo-013/Output/ROLayer/Programs/Man-Pages/2.33/man/man4/mouse.4
** Conflict: /Depot/Gobo-013/Output/ROLayer/Programs/Mesa/6.5/include/GL/gl.h
** Conflict: /Depot/Gobo-013/Output/ROLayer/Programs/Mesa/6.5/include/GL/xmesa.h
** Conflict: /Depot/Gobo-013/Output/ROLayer/Programs/Mesa/6.5/include/GL/ggimesa.h
** Conflict: /Depot/Gobo-013/Output/ROLayer/Programs/Mesa/6.5/include/GL/glu.h
** Conflict: /Depot/Gobo-013/Output/ROLayer/Programs/Mesa/6.5/include/GL/glx.h
** Conflict: /Depot/Gobo-013/Output/ROLayer/Programs/Mesa/6.5/include/GL/dmesa.h
** Conflict: /Depot/Gobo-013/Output/ROLayer/Programs/Mesa/6.5/include/GL/osmesa.h
** Conflict: /Depot/Gobo-013/Output/ROLayer/Programs/Mesa/6.5/include/GL/gl_mangle.h
** Conflict: /Depot/Gobo-013/Output/ROLayer/Programs/Mesa/6.5/include/GL/glx_mangle.h
** Conflict: /Depot/Gobo-013/Output/ROLayer/Programs/Mesa/6.5/include/GL/mesa_wgl.h
** Conflict: /Depot/Gobo-013/Output/ROLayer/Programs/Mesa/6.5/include/GL/glfbdev.h
** Conflict: /Depot/Gobo-013/Output/ROLayer/Programs/Mesa/6.5/include/GL/glxext.h
** Conflict: /Depot/Gobo-013/Output/ROLayer/Programs/Mesa/6.5/include/GL/uglmesa.h
** Conflict: /Depot/Gobo-013/Output/ROLayer/Programs/Mesa/6.5/include/GL/fxmesa.h
** Conflict: /Depot/Gobo-013/Output/ROLayer/Programs/Mesa/6.5/include/GL/glext.h
** Conflict: /Depot/Gobo-013/Output/ROLayer/Programs/Mesa/6.5/include/GL/directfbgl.h
** Conflict: /Depot/Gobo-013/Output/ROLayer/Programs/Mesa/6.5/include/GL/svgamesa.h
** Conflict: /Depot/Gobo-013/Output/ROLayer/Programs/Mesa/6.5/include/GL/glu_mangle.h
** Conflict: /Depot/Gobo-013/Output/ROLayer/Programs/Mesa/6.5/include/GL/amesa.h
** Conflict: /Depot/Gobo-013/Output/ROLayer/Programs/Mesa/6.5/include/GL/vms_x_fix.h
** Conflict: /Depot/Gobo-013/Output/ROLayer/Programs/Mesa/6.5/include/GL/uglglutshapes.h
** Conflict: /Depot/Gobo-013/Output/ROLayer/Programs/Mesa/6.5/include/GL/xmesa_x.h
** Conflict: /Depot/Gobo-013/Output/ROLayer/Programs/Mesa/6.5/include/GL/wmesa.h
** Conflict: /Depot/Gobo-013/Output/ROLayer/Programs/Mesa/6.5/include/GL/mglmesa.h
** Conflict: /Depot/Gobo-013/Output/ROLayer/Programs/Mesa/6.5/include/GL/xmesa_xf86.h

{{Wiki Team}}



=Test Wiki Output Here=
----

= OptionParser =
This file contains a bunch of shell functions used by gobo tools to handle and parse command line options and in a convenient way. A linguistic clarification: we call options the -<something> and --<something> parameters you encounter in virtually every command line program, while arguments are the remaining parameters,that is, the actual arguments on which the program works. For example:

MakeRecipe --no-web Foo 1.0 http://foo.bar

has one option and three arguments.

See each function's header for a detailed description of its usage.


= Functions: =
<table border="1" width="100%" cellspacing="0" cellpadding="5">
<tr><td colspan="2" style="background:#6080C0; color:white">'''Function summary'''</td></tr>
<tr><td WIDTH="60%">[[OptionParser#Add_Option|Add_Option]] <type> <default> <short> <long> <description> [<values>]</td>
<td>Adds an option, updating options arrays accordingly.</tr>
<tr><td WIDTH="60%">[[OptionParser#Add_Option_Boolean|Add_Option_Boolean]] <short> <long> <description></td>
<td>Adds an option of type boolean.</tr>
<tr><td WIDTH="60%">[[OptionParser#Add_Option_Entry|Add_Option_Entry]] <short> <long> <description> [<default> [<values>]]</td>
<td>Adds a full option entry.</tr>
<tr><td WIDTH="60%">[[OptionParser#Add_Option_List|Add_Option_List]] <shor> <long> <description> [<default>]</td>
<td>Adds an option of type list.</tr>
<tr><td WIDTH="60%">[[OptionParser#Add_Argument|Add_Argument]] <value></td>
<td>Adds a new argument to our array of arguments.</tr>
<tr><td WIDTH="60%">[[OptionParser#Args_To_Array|Args_To_Array]] eval ` <name> [<from> [<to>]]`</td>
<td>Converts a space separated string of arguments to a bash array.</tr>
<tr><td WIDTH="60%">[[OptionParser#Arg|Arg]] <position></td>
<td>Returns the argument at the specified position.</tr>
<tr><td WIDTH="60%">[[OptionParser#Number_Of_Arguments|Number_Of_Arguments]]</td>
<td>Prints the number of arguments.</tr>
<tr><td WIDTH="60%">[[OptionParser#Entry|Entry]] <name></td>
<td>Checks whether a specific option of type 'Entry' exists in our list.</tr>
<tr><td WIDTH="60%">[[OptionParser#Is_Entry_Set|Is_Entry_Set]] <name></td>
<td>Checks whether the specified Entry option has a default value.</tr>
<tr><td WIDTH="60%">[[OptionParser#Is_Entry|Is_Entry]] <option> [<compare>]</td>
<td>Checks whether it exists an Entry option with the specified name-value</tr>
<tr><td WIDTH="60%">[[OptionParser#Boolean|Boolean]] <name></td>
<td>Checks if the specified Boolean option exists and is active.</tr>
<tr><td WIDTH="60%">[[OptionParser#Set_Boolean|Set_Boolean]] <name> [<value>]</td>
<td>Set a boolean option to 'on' or 'off', as specified by the argument.</tr>
<tr><td WIDTH="60%">[[OptionParser#Show_Version|Show_Version]]</td>
<td>Prints out a short "version" message.</tr>
<tr><td WIDTH="60%">[[OptionParser#Show_Help|Show_Help]]</td>
<td>Prints out a short help.</tr>
<tr><td WIDTH="60%">[[OptionParser#List_Options|List_Options]]</td>
<td>Prints the list of options, in the format:</tr>
<tr><td WIDTH="60%">[[OptionParser#Get_Parsed_Options|Get_Parsed_Options]]</td>
<td>Prints options passed to the script.</tr>
<tr><td WIDTH="60%">[[OptionParser#Parse_Options|Parse_Options]] "$@"</td>
<td>The actual parser. It parses options and arguments passed when invoking</tr>
</table>

=== Add_Option ===
----
Adds an option, updating options arrays accordingly. Options are stored using a number of arrays, one for every option's attribute. Every array has dimension equal to the number of options defined for the current script. Options' attributes are as follows:

*type = {"Boolean", "Entry", "List"}
*short form
*long form
*description 
*default value 
*possible values

See each option's Add_ function header for a more detailed description.
==== Usage ====
<code>Add_Option <type> <default> <short> <long> <description> [<values>]</code>
<pre>Add_Option "Entry" "ask" "s" "same" "What to do when unpackaging over the same version." "keep remove ask cancel"</pre>
==== Arguments ====
:; type (string)
:: Option's type
:; default (string)
:: Option's default value
:; short (char)
:: Option's shortening
:; long (string)
:: Option's full name
:; description (string)
:: Option's description
:; values (list)
:: Option's possible values

=== Add_Option_Boolean ===
----
Adds an option of type boolean. A boolean option has only two possible values: 'on' and 'off', which respectively map to 'true' and 'false'. In fact, anything else than 'on' means 'false'. Since its values are fixed, there is no need to specify a list of possible values. Furthermore, they don't have a default value because they're evaluated at 'false' by default.
==== Usage ====
<code>Add_Option_Boolean <short> <long> <description></code>
<pre>Add_Option_Boolean "d" "display" "Informative output only. Do not actually kill any process."</pre>
==== Arguments ====
:; short (char)
:: Option's shortening
:; long (string)
:: Option's full name
:; description (string)
:: Option's description

=== Add_Option_Entry ===
----
Adds a full option entry. An option of this type can assume only one value at a time, chosen among the pool of possible values.
==== Usage ====
<code>Add_Option_Entry <short> <long> <description> [<default> [<values>]]</code>
<pre>Add_Option_Entry "s" "same" "What to do when unpackaging over the same version." "ask" "keep remove ask cancel"</pre>
==== Arguments ====
:; short (char)
:: Option's shortening
:; long (string)
:: Option's full name
:; description (string)
:: Option's description
:; default (string)
:: Option's default value
:; values (list)
:: Option's possible values

=== Add_Option_List ===
----
Adds an option of type list. This is an option which can take a list of values instead of a single one.
 <tt>Add_Option_List <shor> <long> <description> [<default>]</tt>

==== Example: ====
<pre>Add_Option_List "s" "sandbox" "Colon-separated list of areas where the restricted user has write access to." "."</pre>

==== Arguments ====
:; short (char)
:: Option's shortening
:; long (string)
:: Option's full name
:; description (string)
:: Option's description
:; default (string)
:: Option's default value

=== Add_Argument ===
----
Adds a new argument to our array of arguments.
 <tt>Add_Argument <value></tt>

==== Example: ====
<pre>Add Argument</pre>

==== Arguments ====
:; value (string)
:: The argument to be added

=== Args_To_Array ===
----
Converts a space separated string of arguments to a bash array. If the start (end) position is not specified, the array will start at the first (end at the last) one.
 <tt>eval `Args_To_Array <name> [<from> [<to>]]`</tt>

==== Example: ====
Returns an array called myArray with all non-option arguments.
<pre>eval `Args_To_Array myArray`</pre>

==== Arguments ====
:; name (string)
:: Array's name
:; from (number)
:: The argument to start from
:; to (number)
:: The argument to end to


==== Output ====
:; array
:: A bash array, starting from <from> and ending at <to>,

=== Arg ===
----
Returns the argument at the specified position.
 <tt>Arg <position></tt>

==== Example: ====
<pre>Arg 3</pre>

==== Arguments ====
:; position (number)
:: Argument's position


==== Output ====
:; string
:: The argument at <position>, if in bounds, or an empty string

=== Number_Of_Arguments ===
----
Prints the number of arguments.
 <tt>Number_Of_Arguments

</tt>

==== Arguments ====
: none


==== Output ====
:; number
:: The number of arguments.

=== Entry ===
----
Checks whether a specific option of type 'Entry' exists in our list.
 <tt>Entry <name></tt>

==== Example: ====
<pre>Entry "s"</pre>

==== Arguments ====
:; strin (g)
:: Option's shortening/full name


==== Output ====
:; string
:: The option's value.


==== Return ====
:; 0
:: The option exists with a value.
:; 1
:: The option exists without a value.
:; 2
:: The option doesn't exist.

=== Is_Entry_Set ===
----
Checks whether the specified Entry option has a default value.
 <tt>Is_Entry_Set <name></tt>

==== Example: ====
<pre>Is_Entry_Set "s"</pre>

==== Arguments ====
:; strin (g)
:: Option's shortening/full name


==== Return ====
:; 0
:: The option has a default value.
:; 1
:: The option has no default value.
:; 2
:: The option doesn't exist.

=== Is_Entry ===
----
Checks whether it exists an Entry option with the specified name-value pair. The value can also be empty, in which case the option just has to exist.
 <tt>Is_Entry <option> [<compare>]</tt>

==== Example: ====
<pre>Is_Entry "s" "ask"</pre>

==== Arguments ====
:; option (string)
:: Option's name
:; compare (string)
:: Option's value


==== Return ====
:; 0
:: The <option>-<compare> pair exists, or <option> has a

=== Boolean ===
----
Checks if the specified Boolean option exists and is active.
 <tt>Boolean <name></tt>

==== Example: ====
<pre>Boolean "no-web"</pre>

==== Arguments ====
:; strin (g)
:: Option's shortening/full name


==== Return ====
:; 0
:: The option is active.
:; 1
:: The option isn't active.
:; 2
:: The option doesn't exist.

=== Set_Boolean ===
----
Set a boolean option to 'on' or 'off', as specified by the argument. Defaults to 'on' when no argument is present.
 <tt>Set_Boolean <name> [<value>]</tt>

==== Example: ====
<pre>Set_Boolean "batch"</pre>

==== Arguments ====
:; strin (g)
:: Option's shortening/full name
:; value (string)
:: Option's value.


==== Return ====
:; 0
:: The option was set correctly.
:; 2
:: The option doesn't exist.

=== Show_Version ===
----
Prints out a short "version" message.
 <tt>Show_Version

</tt>

==== Arguments ====
: none


==== Output ====
:; string
:: A short "version" message, consisting of name, version and

=== Show_Help ===
----
Prints out a short help.
 <tt>Show_Help

</tt>

==== Arguments ====
: none


==== Output ====
:; string
:: The script's help.


==== Return ====
:; 0
:: Everything went fine.

=== List_Options ===
----
Prints the list of options, in the format: -<shortening> --<full name>
 <tt>List_Options

</tt>

==== Arguments ====
: none


==== Output ====
:; string
:: A list of the script's options.


==== Return ====
:; 0
:: Everything went fine.

=== Get_Parsed_Options ===
----
Prints options passed to the script.
 <tt>Get_Parsed_Options

</tt>

==== Arguments ====
: none


==== Output ====
:; list
:: Options passed to the script.

=== Parse_Options ===
----
The actual parser. It parses options and arguments passed when invoking the script.
 <tt>Parse_Options "$@"

</tt>

==== Arguments ====
:; lis (t)
:: The list of parameters to be parsed, as passed to the


==== Return ====
:; 0
:: Everything went fine.
:; 1
:: Unknown option.