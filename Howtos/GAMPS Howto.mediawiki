GAMPS is a GoboLinux/Apache/MySql/P/SSL web serving system.  This document is intended to be a step-by-step manual on setting up a MySQL database server and Apache web server with PHP/Python/Perl/SSL support in GoboLinux.

== MySQL ==
# First, you have to install MySQL. Fire up a console and type
<blockquote><nowiki>Compile MySQL</nowiki></pre>
Once you've answered Compile's initial wave of questions, you should have enough time to make yourself some coffee. <br/>
# When the compilation has finished, you may choose a config file to use. <br/><br/>The mysql configuration is stored in /Programs/MySQL/Settings/mysql, and the config file actually used has to be named my.cnf. The default config file is my-small.cnf. If you're happy with this, go to the next step; otherwise choose one of the other config files and overwrite my.cnf with it. <br/>
# Now it's time to start the MySQL server. Do this by typing <br/>
<pre><nowiki> <br/>
StartTask MySQL <br/>
</nowiki></blockquote>The server is now running.
#:'''Note:'''<br/>
#:If the server crashes at this moment you might want to check the permissions of /Files/MySQL. Owner and group must both be mysql. You can achieve this by typing 
<blockquote><nowiki>chown -R mysql:mysql /Files/MySQL</nowiki></pre> 
and starting the server again. <br/>
# The next step is to set a password for the mysql root user. Type <blockquote>mysqladmin -u root password mYNewpAsSw0rD</pre>
# If you want to start the mysql server automatically at boot time, type 
<blockquote><nowiki>
echo 'Exec "Starting MySQL Database Server..." MySQL Start' \ <br/>
   >> /System/Settings/BootScripts/BootUp <br/>
</nowiki></blockquote>
# You can test your MySQL installation by typing
<blockquote><nowiki>
mysql -u root -p <br/>
</nowiki></blockquote>
If everything worked, you'll be prompted for a password, then taken to the MySQL monitor.

== OpenSSL - Part 1 ==
The OpenSSL installation is divided into two parts. Part 1 is easy:<blockquote>Compile OpenSSL</pre>
 <br/>
== Apache == <br/>
# As usual, compiling is the first step:<blockquote>Compile HTTPD</pre>
# After compilng, Apache should be ready to start. Just type <blockquote>StartTask HTTPD</pre>
# If you want to start the Apache server automatically at boot time, type  <br/>
<pre><nowiki> <br/>
echo 'Exec "Starting Apache Web Server..." HTTPD Start' \ <br/>
   >> /System/Settings/BootScripts/BootUp <br/>
</nowiki></blockquote>

== OpenSSL - Part 2 ==

{{Todo|To be written.}}

== PHP ==
# To install Apache PHP Module, type
<blockquote>
<nowiki> <br/>
Compile Mod_PHP <br/>
</nowiki> <br/>
</blockquote>  This will install the Apache Module only! The CLI version of PHP and PEAR will not build.
# You have to restart Apache to load the new PHP module
<blockquote><nowiki>
StopTask HTTPD <br/>
StartTask HTTPD <br/>
</nowiki></blockquote>

== Python ==

# Compile the module
<blockquote><nowiki>
Compile Mod_Python <br/>
</nowiki></blockquote>

# Restart Apache again
<blockquote><nowiki>
StopTask HTTPD <br/>
StartTask HTTPD <br/>
</nowiki></blockquote>

# If you use HTTPD 2.0.x you have to edit your httpd.conf (/Programs/HTTPD/Settings/httpd/httpd.conf) to load the Python module with Apache. Add the following line after the other LoadModule directives:
<blockquote><nowiki>
LoadModule python_module modules/mod_python.so <br/>
AddType application/x-python-code pyo pyc <br/>
AddType text/x-python py <br/>
</nowiki></blockquote>

== Perl ==

{{Todo|To be written.}}

== Celebrate ==
You're done! All you have to do now is place your websites at /Depot/WWW/Documents

[[Category:Howtos]]
