A new GoboLinux installation provides boot scripts to manage basic daemons and configuration options. This page explains how to modify what GoboLinux does during startup and shutdown.

== Boot-time options ==

When a GoboLinux system boots, it runs a set of boot scripts launching programs
that configure the keyboard, set the system clock, initialize the swap
partitions, etc. 

Settings for these program reside in /System/Settings/BootOptions and /System/Settings/NetworkOptions. Both files contain entries of the form:

    Option=value 

Note that no space is allowed before or after the = character. (For the curious, yes, this is just a shell file that is "sourced" by the boot scripts.)

The following sections describe the available options in the /System/Settings/BootOptions and NetworkOptions files and the possible values you can give them.

=== Clock mode ===

GoboLinux needs to know if your hardware clock is set to GMT or local time. Specify this by editing the ClockMode option. Set it to GMT if your hardware clock is set to GMT. Set it to LocalTime if your hardware clock is set to local time.

For obtaining time zone information, Linux applications rely on information provided by Glibc, the C library. Glibc, on its turn, uses the "localtime" symlink on its Settings directory (/Programs/Glibc/Settings) to indicate which is the active time zone. This symlink is configured by the installer according to the option you selected in the time zone selection screen, but you can always reconfigure it by hand, by pointing the "localtime" symlink to a different location under /Programs/Glibc/Current/Shared/zoneinfo.

The ClockMode information is used by the hwclock application, which is launched at boot time through the SetClock task.

=== Console setup ===

==== Font ====

If you don't like the default console font used by GoboLinux, you can select another using the ConsoleFont option in /System/Settings/BootOptions.

You can also set the console font from the command line using the setfont utility. See 'man setfont' for details.

Remember that this affects only the console font. On X, applications have their own font settings.

==== Keymap ====

Use the KeymapLayout option in /System/Settings/BootOptions to select an appropriate console keyboard layout.

The available keymaps are in the KBD package; they are the .map files. You can set the console keyboard layout at any time by running loadkeys. For example, to set the Dvorak keymap, just type in:
 loadkeys dvorak.map

==== Mouse ====

The MouseType and MouseDevice options in /System/Settings/BootScripts/BootUp configure mouse support on the console. They are disabled by default.
. 
=== Graphical display setup (X server) ===

==== Keymap ====

The keyboard layout for programs running under the window manager is mapped
according the "InputDevice" section in /System/Settings/xorg.conf when the
graphic display controller (X server) starts. With the window manager running,
you can change keyboard mappings and other display setting using setxkbmap,
xmodmap, and xset tools. To select a Dvorak keyboard layout, type ```setxkbmap
dvorak``` in a terminal. These commands can also be placed in $HOME/.xinitrc

Some desktop environments also offer graphical tools for setting the keyboard layout. For example, in KDE you can configure this at the KDE Control Center.

==== Mouse ====

The mouse pointer for the graphical display is defined in an "InputDevice" section in /System/Settings/xorg.conf. The [[Installer]] should have set a sane default for your system, based on hardware autodetection. If not, you can always try a failsafe setup such as:


    Section "InputDevice" 
    Identifier  "Mouse0" 
    Driver      "mouse" 
    Option      "Protocol" "auto" 
    Option      "Device" "/dev/input/mice" 
    Option      "ZAxisMapping" "4 5" 
    EndSection 


There is nothing GoboLinux-specific about mouse setup on X. You can find HOWTOs and tutorials around the net that can give you more detailed instructions about this. (But feel free to drop by at the mailing list if you're still stuck!)

=== Kernel modules loaded on boot ===

Through the use of Udev, GoboLinux is capable of loading a number of modules automatically at boot. However, many times they aren't capable of loading them, and that's where the user must do that manually.

This is a job which can be done by editing /System/Settings/modprobe.conf, in the same manner as you should do in another distribution. However, the [[BootScripts]] package has a special array where the modules and their parameters can be specified, and they'll get loaded at boot time with no pain.

This file is called /System/Settings/[[BootOptions]]. Give it a look, and you'll see an array called UserDefinedModules, which is probably commented. This array is sourced by the boot scripts, and for every line, it will modprobe it, including any parameters following them. This is how a simple array to load i810_audio (audio driver) and sk98lin (ethernet driver) can be constructed:

    UserDefinedModules=( 
        "i810_audio" 
        "sk98lin" 
    ) 


=== Network configuration ===

==== Wi-Fi ====

If you are using Wi-Fi, just select your network using the [http://github.com/gobolinux/GoboNet GoboNet] widget in the AwesomeWM system tray:

https://gobolinux.org/images/gobo016gobonet.png

==== Wired network ====

If you have a wired network, initialize it on boot using standard Linux commands in your bootscripts sequence.

First, check which are your network interfaces typing


    ifconfig 

You should have a network interface named something like `eth0` or `enp0s3`.

Edit the /System/Settings/BootScripts/BootUp script. If you are using DHCP, just add this:


    dhcpcd eth0 & 


If you have a static network configuration, add these two commands, adjusting them to your network setup:


    ifconfig eth0 192.168.1.5 netmask 255.255.255.0 
    route add default gateway 192.168.1.1 metric 1 dev eth0 


The specification of the DNS servers (if specified manually) is done in the same place as the 
traditional Unix systems, at /etc/resolv.conf (or /System/Settings/resolv.conf). 
An example of resolv.conf file is:


    nameserver 200.176.2.10 
    nameserver 200.199.252.68 


== Customizing the initialization ==

A detailed description on how the GoboLinux boot scripts behave is given in [[Boot scripts]]. For the purposes of this overview, you just need to know that when you press your computer power button, some scripts are automatically executed.

These scripts are located at /System/Settings/[[BootScripts]] and are described below.

* '''BootUp''' - is the basic boot script. As the name implies, it runs when the system boots up. It contains generic initializations that should apply in every boot scenario. More complex boot scenarios can be built on that by using different boot scripts that start by calling BootUp and then doing additional stuff. Two of those scripts are shipped by default:
** '''Console''' - this calls BootUp and then runs extra initializations suited for a console session.
** '''Graphic''' - this calls BootUp and then starts a graphic login manager.
* '''Shutdown''' - analogous to BootUp, this is the basic shutdown script. It is used by the other, more specialized, termination scripts:
** '''Reboot''' - invokes Shutdown to perform the necessary terminations, and reboots the machine.
** '''Halt''' - invokes Shutdown and powers down the machine (or simply halts if there's no hardware support for software-controlled power down).

Each of these files is essentially composed of a sequence of lines like the following one:

    Exec "Message..." command-with-parameters

For example, suppose that you want to adjust your keyboard delay and repeat rate in the console. You can do this by adding the following line to /System/Settings/BootScripts/Console:

    Exec "Making keyboard speedy..." kbdrate -r 30 -d 250

The boot scripts also support a concept of "tasks". 
This is slightly more advanced, and is explained in the section [[Boot script tasks]].

=== Automated login ===

If you wish to use an automated login, there are several ways to achieve this goal.

For KDE (or KDM, it also has a configuration which allows you to tweak it a lot) you can use this:

# Open Control Center in administrative mode.
# Select Login Manager.
# Under the Convenience tab check "Enable auto-login" and select which_user you should log in as.
# Click "Apply".

If you do not use KDE or want a non-GUI based solution, one way is to use rungetty.


# In your inittab file (for example, nano /etc/inittab) find the line which includes tty1 (it's your first terminal, the default showing up on login). 
# Now, you will see "agetty" in there - change this "agetty" line to <code>"rungetty tty1 --autologin your_username"</code> 
     
Of course, replace your_username with the user you want to login as.
     
Using another tty than 1 may be useful too. 

=== Boot themes ===

GoboLinux is flexible enough to offer you a choice of 
themes to control how your GoboLinux looks when
starting up. 

You can select a theme by setting ```BootTheme=<ThemeName>``` in the BootOptions file.
Available themes include:

* '''CheckList''' - Shows tasks and others that depend on them, then checks them off.
* '''Hat''' - A Red-Hat look-alike: lots of colored [ OK ]s and [FAILED]s are echoed as things are initialized.
* '''Progress''', '''Progress-II''', or '''Progress-III''' - Fancy themes that stress your terminal with tons of escape codes.
* '''Quotes''' - Prints short random quotes to indicate success or failure of every initialized item.
* '''Slack''' - This theme is inspired by the feel of old-school Slackware boots: no distracting messages, no colors, no special effects.

Check /Programs/BootScripts/Current/Themes/ to see all the available themes.

You can use the TestBootTheme script to see how a boot theme looks like without actually rebooting your computer. TestBootTheme is described on section [[Testing a boot theme]].

You can also set the boot theme from GRUB by adding BootTheme=<ThemeName> to the boot line. This can be handy if BootOptions file specifies a broken or nonexistent theme, because GoboLinux will not boot without a valid one.

Physically, a GoboLinux boot theme is a single script file located in /Programs/[[BootScripts]]/''<version>''/Themes.

The theme file is loaded by the boot scripts core, and is called once for every runlevel change. Although interesting stuff can be done in the script body, a compliant boot script has only to implement the following functions:

* ThemeInit
* ThemeFile
* ThemeBefore
* ThemeAfter
* ThemeFinish

These functions are the hotspots that glue the theme and the boot scripts core together.
