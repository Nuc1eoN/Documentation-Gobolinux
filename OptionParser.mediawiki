This file contains a bunch of shell functions used by gobo tools to handle and parse command line options and in a convenient way. A linguistic clarification: we call options the -<something> and --<something> parameters you encounter in virtually every command line program, while arguments are the remaining parameters,that is, the actual arguments on which the program works. For example:

     MakeRecipe --no-web Foo 1.0 http://foo.bar

has one option and three arguments.

See each function's header for a detailed description of its
= Functions: =

'''Function summary'''

[[OptionParser#Add_Option|Add_Option]]  
<code><type> <default> <short> <long> <description> [<values>]</code>
Adds an option, updating options arrays accordingly.

[[OptionParser#Add_Option_Boolean|Add_Option_Boolean]]  
Adds an option of type boolean.

[[OptionParser#Add_Option_Entry|Add_Option_Entry]]  
Adds a full option entry.

[[OptionParser#Add_Option_List|Add_Option_List]]  
Adds an option of type list.

[[OptionParser#Add_Argument|Add_Argument]]  
Adds a new argument to our array of arguments.

[[OptionParser#Args_To_Array|Args_To_Array]]  
Converts a space separated string of arguments to a bash array.

[[OptionParser#Arg|Arg]]  
Returns the argument at the specified position.

[[OptionParser#Number_Of_Arguments|Number_Of_Arguments]]  
Prints the number of arguments.

[[OptionParser#Entry|Entry]]  
Checks whether a specific option of type 'Entry' exists in our list.

[[OptionParser#Is_Entry_Set|Is_Entry_Set]]  
Checks whether the specified Entry option has a default value.

[[OptionParser#Is_Entry|Is_Entry]]  
Checks whether it exists an Entry option with the specified name-value

[[OptionParser#Boolean|Boolean]]  
Checks if the specified Boolean option exists and is active.

[[OptionParser#Set_Boolean|Set_Boolean]]  
Set a boolean option to 'on' or 'off', as specified by the argument.

[[OptionParser#Show_Version|Show_Version]]  
Prints out a short "version" message.

[[OptionParser#Show_Help|Show_Help]]  
Prints out a short help.

[[OptionParser#List_Options|List_Options]]  
Prints the list of options.

[[OptionParser#Get_Parsed_Options|Get_Parsed_Options]]  
Prints options passed to the script.

[[OptionParser#Parse_Options|Parse_Options]]  
The actual parser. It parses options and arguments passed when invoking

=== Add_Option ===
----
Adds an option, updating options arrays accordingly. Options are stored using a number of arrays, one for every option's attribute. Every array has dimension equal to the number of options defined for the current script. Options' attributes are as follows:

-type = {"Boolean", "Entry", "List"} -short form -long form -description -default value -possible values

See each option's Add_ function header for a more detailed description.
==== Usage ====
<code>Add_Option <type> <default> <short> <long> <description> [<values>]</code>

    ==== Arguments ==== 
    :; type (string) 
    :: Option's type 
    :; default (string) 
    :: Option's default value 
    :; short (char) 
    :: Option's shortening 
    :; long (string) 
    :: Option's full name 
    :; description (string) 
    :: Option's description 
    :; values (list) 
    :: Option's possible values 
    === Add_Option_Boolean === 
    ---- 
    Adds an option of type boolean. A boolean option has only two possible values: 'on' and 'off', which respectively map to 'true' and 'false'. In fact, anything else than 'on' means 'false'. Since its values are fixed, there is no need to specify a list of possible values. Furthermore, they don't have a default value because they're evaluated at 'false' by default. 
    ==== Usage ==== 
    <code>Add_Option_Boolean <short> <long> <description></code> 
    <pre>Add_Option_Boolean "d" "display" "Informative output only. Do not actually kill any process."</pre> 
    ==== Arguments ==== 
    :; short (char) 
    :: Option's shortening 
    :; long (string) 
    :: Option's full name 
    :; description (string) 
    :: Option's description 
    === Add_Option_Entry === 
    ---- 
    Adds a full option entry. An option of this type can assume only one value at a time, chosen among the pool of possible values. 
    ==== Usage ==== 
    <code>Add_Option_Entry <short> <long> <description> [<default> [<values>]]</code> 
    <pre>Add_Option_Entry "s" "same" "What to do when unpackaging over the same version." "ask" "keep remove ask cancel"</pre> 
    ==== Arguments ==== 
    :; short (char) 
    :: Option's shortening 
    :; long (string) 
    :: Option's full name 
    :; description (string) 
    :: Option's description 
    :; default (string) 
    :: Option's default value 
    :; values (list) 
    :: Option's possible values 
    === Add_Option_List === 
    ---- 
    Adds an option of type list. This is an option which can take a list of values instead of a single one. 
    ==== Usage ==== 
    <code>Add_Option_List <shor> <long> <description> [<default>]</code> 
    <pre>Add_Option_List "s" "sandbox" "Colon-separated list of areas where the restricted user has write access to." "."</pre> 
    ==== Arguments ==== 
    :; short (char) 
    :: Option's shortening 
    :; long (string) 
    :: Option's full name 
    :; description (string) 
    :: Option's description 
    :; default (string) 
    :: Option's default value 
    === Add_Argument === 
    ---- 
    Adds a new argument to our array of arguments. 
    ==== Usage ==== 
    <code>Add_Argument <value></code> 
    <pre>Add Argument</pre> 
    ==== Arguments ==== 
    :; value (string) 
    :: The argument to be added 
    === Args_To_Array === 
    ---- 
    Converts a space separated string of arguments to a bash array. If the start (end) position is not specified, the array will start at the first (end at the last) one. 
    ==== Usage ==== 
    <code>eval `Args_To_Array <name> [<from> [<to>]]`</code> 
    Returns an array called myArray with all non-option arguments. 
    <pre>eval `Args_To_Array myArray`</pre> 
    ==== Arguments ==== 
    :; name (string) 
    :: Array's name 
    :; from (number) 
    :: The argument to start from 
    :; to (number) 
    :: The argument to end to 
    ==== Output ==== 
    :; array 
    :: A bash array, starting from <from> and ending at <to>, 
    === Arg === 
    ---- 
    Returns the argument at the specified position. 
    ==== Usage ==== 
    <code>Arg <position></code> 
    <pre>Arg 3</pre> 
    ==== Arguments ==== 
    :; position (number) 
    :: Argument's position 
    ==== Output ==== 
    :; string 
    :: The argument at <position>, if in bounds, or an empty string 
    === Number_Of_Arguments === 
    ---- 
    Prints the number of arguments. 
    ==== Usage ==== 
    <code>Number_Of_Arguments</code> 
    ==== Arguments ==== 
    : none 
    ==== Output ==== 
    :; number 
    :: The number of arguments. 
    === Entry === 
    ---- 
    Checks whether a specific option of type 'Entry' exists in our list. 
    ==== Usage ==== 
    <code>Entry <name></code> 
    <pre>Entry "s"</pre> 
    ==== Arguments ==== 
    :; char/string () 
    :: Option's shortening/full name 
    ==== Output ==== 
    :; string 
    :: The option's value. 
    ==== Return ==== 
    :; 0 
    :: The option exists with a value. 
    :; 1 
    :: The option exists without a value. 
    :; 2 
    :: The option doesn't exist. 
    === Is_Entry_Set === 
    ---- 
    Checks whether the specified Entry option has a default value. 
    ==== Usage ==== 
    <code>Is_Entry_Set <name></code> 
    <pre>Is_Entry_Set "s"</pre> 
    ==== Arguments ==== 
    :; char/string () 
    :: Option's shortening/full name 
    ==== Return ==== 
    :; 0 
    :: The option has a default value. 
    :; 1 
    :: The option has no default value. 
    :; 2 
    :: The option doesn't exist. 
    === Is_Entry === 
    ---- 
    Checks whether it exists an Entry option with the specified name-value pair. The value can also be empty, in which case the option just has to exist. 
    ==== Usage ==== 
    <code>Is_Entry <option> [<compare>]</code> 
    <pre>Is_Entry "s" "ask"</pre> 
    ==== Arguments ==== 
    :; option (string) 
    :: Option's name 
    :; compare (string) 
    :: Option's value 
    ==== Return ==== 
    :; 0 
    :: The <option>-<compare> pair exists, or <option> has a 
    === Boolean === 
    ---- 
    Checks if the specified Boolean option exists and is active. 
    ==== Usage ==== 
    <code>Boolean <name></code> 
    <pre>Boolean "no-web"</pre> 
    ==== Arguments ==== 
    :; char/string () 
    :: Option's shortening/full name 
    ==== Return ==== 
    :; 0 
    :: The option is active. 
    :; 1 
    :: The option isn't active. 
    :; 2 
    :: The option doesn't exist. 
    === Set_Boolean === 
    ---- 
    Set a boolean option to 'on' or 'off', as specified by the argument. Defaults to 'on' when no argument is present. 
    ==== Usage ==== 
    <code>Set_Boolean <name> [<value>]</code> 
    <pre>Set_Boolean "batch"</pre> 
    ==== Arguments ==== 
    :; char/string () 
    :: Option's shortening/full name 
    :; value (string) 
    :: Option's value. 
    ==== Return ==== 
    :; 0 
    :: The option was set correctly. 
    :; 2 
    :: The option doesn't exist. 
    === Show_Version === 
    ---- 
    Prints out a short "version" message. 
    ==== Usage ==== 
    <code>Show_Version</code> 
    ==== Arguments ==== 
    : none 
    ==== Output ==== 
    :; string 
    :: A short "version" message, consisting of name, version and 
    === Show_Help === 
    ---- 
    Prints out a short help. 
    ==== Usage ==== 
    <code>Show_Help</code> 
    ==== Arguments ==== 
    : none 
    ==== Output ==== 
    :; string 
    :: The script's help. 
    ==== Return ==== 
    :; 0 
    :: Everything went fine. 
    === List_Options === 
    ---- 
    Prints the list of options, in the format: -<shortening> --<full name> 
    ==== Usage ==== 
    <code>List_Options</code> 
    ==== Arguments ==== 
    : none 
    ==== Output ==== 
    :; string 
    :: A list of the script's options. 
    ==== Return ==== 
    :; 0 
    :: Everything went fine. 
    === Get_Parsed_Options === 
    ---- 
    Prints options passed to the script. 
    ==== Usage ==== 
    <code>Get_Parsed_Options</code> 
    ==== Arguments ==== 
    : none 
    ==== Output ==== 
    :; list 
    :: Options passed to the script. 
    === Parse_Options === 
    ---- 
    The actual parser. It parses options and arguments passed when invoking the script. 
    ==== Usage ==== 
    <code>Parse_Options "$@"</code> 
    ==== Arguments ==== 
    :; $@ (list) 
    :: The list of parameters to be parsed, as passed to the 
    ==== Return ==== 
    :; 0 
    :: Everything went fine. 
    :; 1 
    :: Unknown option. 
