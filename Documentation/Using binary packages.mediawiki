=  Using binary packages =

==  GoboLinux binary packages ==

[[GoboLinux]] uses a very simple format for binary packages. For a given program, say Foo 1.0, a package is simply an archive in .tar.bz2 format containing the Foo/1.0/ and Foo/Settings/ directories (and their contents). For a package built for a i686 architecture, the package will be named Foo--1.0--i686.tar.bz2.

==  Installing binary packages ==

To install binary packages, simply run [[InstallPackage]] passing the package name as a parameter. For example:


    InstallPackage Foo--1.0--i686.tar.bz2 


This will unpack the archive inside /Programs, and will call [[SymlinkProgram]] to update /System/Links.

==  Creating binary packages ==

To create a binary package, use the [[CreatePackage]] script. It has the following syntax:


    CreatePackage <program-name> 


It will create a package of the Current version of the specified program, and store the generated archive at /Programs.

Note: please be careful with the contents of the Settings directory when creating a binary package, so that it does not include personal information. A package submitted for inclusion in the packages directory at [[GoboLinux]].org must feature sensible default settings, preferrably the defaults as specified by the application right after its compilation.

==  Cleaning up ==

[[GoboLinux]] does not feature a specific script to clean up the broken links that will emerge when programs are deleted, but it has a generic script for cleaning broken symbolic links, called [[RemoveBroken]].

[[RemoveBroken]] will verify if any of the files passed to it in the command line is a broken link, and remove those. If no arguments are passed, it receives filenames from standard input (tipically through a pipe).

The usual procedure to clean up symbolic links, is, then:


    ~] cd /System/Links 
    /System/Links] find | RemoveBroken 


{{Handbook}}
