=  Installation using CompileProgram =

If you are used to compiling programs in Linux, you are aware that it is mostly a three-part process: prepare the sources (configure), compile them (make), and install the files generated by the compilation (make install). The process is basically the same in [[GoboLinux]]. However, it requires additional setup in the first step, in order to prepare the sources to compile targeting the [[GoboLinux]] directories, and additional actions in the third step, so that files installed in /Programs get linked in /System (in order words, to make the files from the programs available for the system).

[[GoboLinux]] fetures a series of scripts that automate this process. They are:

* [[PrepareProgram]]
* [[SymlinkProgram]]
* [[CompileProgram]]

[[PrepareProgram]] and [[SymlinkProgram]] are wrappers to the first and third step of compilation as explained above (the second step being simply running 'make'). [[CompileProgram]] is a higher-level wrapper script, that wraps the process as a whole: well-behaved autoconf-based programs can be compiled with a single [[CompileProgram]] command.

==  Setting up the sources: PrepareProgram ==

The [[PrepareProgram]] script does two things. It creates a directory hierarchy for the program under /Programs, and it attempts to prepare the sources for compilation.

The syntax for the [[PrepareProgram]] is:.


    PrepareProgram <program-name> <version-number> ~[ -- <additional-options> ] 


Passing a program name and version number is mandatory. These names are the ones used in the directories under programs. For example,


    PrepareProgram Foo 1.0 


creates the directories /Programs/Foo/Settings, /Programs/Foo/1.0, /Programs/Foo/1.0/bin and so on.

The second task performed by [[PrepareProgram]] is to prepare the sources. Since there isn't a standardized format for distribution of source-code tarballs in the free software world, there is no way to implement completely automated preparation. Fortunately, the popularization of the GNU [[AutoTools]] brings us closer to such a standard.

[[PrepareProgram]], in this second step, will detect availability of preparation tools and perform one of the following:

# If the program includes a 'configure' script generated by GNU autoconf, [[PrepareProgram]] will run it, passing the necessary options (mainly --prefix, --sysconfdir) as well as any additional options requested by the user in the command line (as <additional-options>).
# Some authors develop their own 'configure' scripts, but due to the popularity of GNU autoconf, design a command line interface similar to that used by this program. [[PrepareProgram]] tries to detect if a non-autoconf 'configure' script accepts at least the --prefix option, and use it.
# If unfortunately the program does not feature a standard preparation script such as 'configure', the [[PrepareProgram]] will, as a last resort, scan for hardcoded paths in the Makefiles and attempt to modify them. Given that this automated process can be highly error-prone, [[PrepareProgram]] avoids being "automagical" and asks for the user's assistance: it asks the user for permission before attempting modifications, it saves backup copies of all Makefiles, and displays a summary of changes to the user. (Note: If the user is sure the modifications will be correct, all interaction can be suppressed passing the --batch option to [[PrepareProgram]].)
In short, [[PrepareProgram]] can be considered a wrapper to 'configure'. Instead of running, for example,


    ~/foo-1.0] configure --with-shared=yes 


you'll run


    ~/foo-1.0] PrepareProgram Foo 1.0 -- --with-shared=yes 


However, for most programs that use GNU [[AutoTools]], you'll want to use the all-in-one [[CompileProgram]] wrapper script.

==  Linking the sources: SymlinkProgram ==

The final step in the compilation of a program is performed by the [[SymlinkProgram]].

The syntax for [[SymlinkProgram]] is:


    SymlinkProgram <program-name> ~[ <version-number> ] 


The second argument is optional. If no version number is specified, the one linked as Current will be used.

[[SymlinkProgram]] is the script responsible for creating the symbolic links under /System/Links. It can also, optionally, provide a controlled environment for safely executing 'make install', using a sandbox provided by the [[FiboSandbox]] script. To have [[SymlinkProgram]] perform 'make install', use the --make (-m) option, like this:


    SymlinkProgram -m Foo 


It is recommended that 'make install' is always executed through [[SymlinkProgram]], because the sandbox ensures that 'make install' will only have permissions to store files under /Programs/Foo/Current and /Programs/Foo/Settings.

[[SymlinkProgram]] features many command-line switches. Please refer to the --help page for details.

==  Wrapping the entire compilation process: CompileProgram ==

The [[CompileProgram]] script wraps [[PrepareProgram]], make and [[SymlinkProgram]] in a single command, while adding other niceties.

The syntax for [[CompileProgram]] is:


    CompileProgram <file-or-path> [ <program-name> [ <version-number> ] ] [ -- <additional-options> ] 


The first argument is the filename of the source tarball or the path where the sources are located. Normally, you'll want to use the '.' (current) directory as an argument, doing something like this:


    ~] aunpack foo-1.0.tar.gz 
    ~] cd foo-1.0 
    ~/foo-1.0] CompileProgram . 


Note that, unlike in [[PrepareProgram]] and [[SymlinkProgram]], here both the program name and version are optional. [[CompileProgram]] performs a number of heuristics to determine the program name (and capitalization) and version. These heuristics, among other things, read the directory name and scan the README file. [[CompileProgram]] will display the name and version detected, and ask for confirmation. If those are not satisfactory, the user can cancel the process and enter the correct names in the command line, like:


    ~/foo-1.0] CompileProgram . 
    Press Enter to compile Foo, version 1.0 or Ctrl-C to cancel. 
    <Ctrl-C> 
    ~/foo-1.0] CompileProgram . Foo 
    Press Enter to compile Foo, version 1.0 or Ctrl-C to cancel. 
    <Enter> 


Prior to compilation, [[CompileProgram]] will display on screen the README and INSTALL files, if present. They may contain relevant information for the user such as additional switches to be passed to configure. These options can be passed to [[CompileProgram]] like in [[PrepareProgram]]: appended to the commandline options, after '--'.

[[CompileProgram]] then runs 'make' (with no arguments as default, or with an argument passed with --make-target) and then [[SymlinkProgram]].

[[CompileProgram]] features additional command-line switches to further refine its behavior for special cases. Please refer to the --help page for details.

{{Handbook}}
