==  What the heck is GoboLinux? ==

GoboLinux is a Linux distribution that breaks with the historical Unix directory hierarchy. Basically, this means that there are no directories such as /usr and /etc. The main idea of the alternative hierarchy is to store all files belonging to an application in its own separate subtree; therefore we have directories such as /Programs/GCC/2.95.3/lib.

To allow the system to find these files, they are logically grouped in directories such as /System/Index/bin, which, you guessed it, contains symbolic links to all executable files inside the Programs hierarchy.

To maintain backwards compatibility with traditional Unix/Linux apps, there are symbolic links that mimic the Unix tree, such as "/usr/bin -> /System/Index/bin", and "/sbin -> /System/Index/bin" (this example shows that arbitrary differentiations between files of the same category were also removed).

==  Is it a newbie-oriented distribution? ==

No, it is not. It is geared towards people who prefer to install applications from the original source packages. That is the main reason why each application gets its own directory: so you can install it from source there and then remove it with an "rm -rf". So, you see, GoboLinux is oriented at the experienced user who doesn't like things to be automagical. Our scripts merely automate procedures, but they don't "make decisions", and whenever they have to, they ask first.

The binary package collection was created as a way to avoid duplication of effort between users. The source package project was created to store "compilation rules" of the original source packages of the applications. We do not wish to estabilish a "packaging standard" such as RPM. We think that there is no real need for "packages" if the original .tar.gz is properly made. For instance, when an application uses the GNU AutoTools (autoconf, automake...) you don't need any GoboLinux package to keep your system consistent.

However, given the more logical directory tree, GoboLinux could be made, with a comprehensive binary package collection and graphical front-ends to the scripts, into a newbie-friendly distribution, but that is not a specific goal we seek (at least not in short or mid term).

==  Is GoboLinux "ready"? ==

Yes, it is ready in the sense that you can, today, have a full operating system running 100% on GoboLinux. It is in a young stage of development, which leads to our next question...

==  What is its current status? ==

This can be split in two questions, one about the status of the GoboLinux tools, and one about the availability of packages.

GoboLinux relies on a series of tools that automate various tasks, such as generation, installation and removal of packages, and most importantly, maintainance of the symbolic links that keep the system consistent. These tools (mostly are shell scripts, actually) are fairly stable, since the idea behind GoboLinux is not new (see question about the origins of GoboLinux).

Another important issue when using a distribution is the availability of packages, ie, software that you can download in binary form and install in it straight away. In this aspect, GoboLinux is very young and far behind the other estabilished distributions. We have, however, all packages needed to get a running system (all packages that are part of "Linux From Scratch" and "Beyond Linux From Scratch" projects, for example), plus many others, such as KDE and all related packages, Tcl/Tk, and the list just won't stop growing. Check out the latest list.

==  Who created GoboLinux? What are its origins? ==

The concept was created by me, Hisham Muhammad. The first version of GoboLinux was created by me and Andrï¿½ Detsch.

GoboLinux has matured over a period of two years. Initially it started as a way to install programs cleanly inside a regular user account at the University (since I didn't have the real Linux tree available for me, I chose to create my own fixing what I saw as mistakes in it). Then I moved the system to my home computer, and it coexisted with the usual Unix tree -- I used to call it LodeLinux, after my usual online nickname.

One day, after The Great Filesystem Crash, I had to reinstall my whole system, and I thought about using, in the new system, only the alternative tree (in the pre-crash system, it already held about 80% of all installed software). Detsch was also considering reinstalling his Linux system, so we gathered one weekend at his house, and ran the entire Linux From Scratch procedure, changing it to use the alternative directory tree. We named it GoboLinux after Gobo, who is our financial advisor, spiritual mentor and personal trainer.

==  Who develops GoboLinux? ==
GoboLinux was first developed by Hisham Muhammad and Andre Detsch, as the successor of a previous Hisham's experiment, [[LodeLinux]]. Since then, we started getting more and more users, which, in the true spirit of Free Software, are also contributing with the project. Guilherme Bedin, our proud GoboLinux User #3, started to package the entire thing in a CD. As time passes, more and more people are joining the project. Lucas Correia Villa Real is our regular kernel hacker, with important contributions of Felipe Damasio. Since 006 version, there are people from all over the World contributing to GoboLinux, establishing an ever changing [http://www.gobolinux.org/?page=devteam dev team].

==  What are your goals about GoboLinux? ==

Our first goal is to have a system that we enjoy using, that won't get destroyed by some stupid package managing software that tries to administrate our machine for us. Most Linux distributions try to make life easier to the novice user, but this way they are making life much harder for the more seasoned user. I don't claim that GoboLinux is easier, only that it "makes more sense". However, people who use it say that it is indeed easier to administrate, given that it lets you understand your system better (if you are willing to understand it).

Another goal is to have binary compatibility between all users, so we can compile stuff at home and share between each other, so that we won't need to each of us download the same .tar.gz and waste time compiling it (as we used to do).

We jokingly say that GoboLinux is "your last Linux distribution", because we find it much easier to keep it up-to-date than with regular distributions. Since I moved to a GoboLinux-style system, I only had to reinstall the operating system once, in the event of The Great Filesystem Crash.

World domination is just a secondary goal.

== Is there a performance loss in using symbolic links, making GoboLinux a bad choice for, say, heavily loaded servers? ==

The short answer: yes, there is, at least theoretically, a performance loss, and no, we never measured it (to know why I wrote theoretically, read "the long answer").

The long answer: the actual impact of the use of symbolic links is probably lower than you think. In a regular Linux distribution, libraries are already accessed through symbolic links. In GoboLinux, our links point directly to the actual file, so there is really one level of indirection to reach a library.

For example, take libc.so.6. It is in /lib, which is a link to /System/Index/lib, but the actual file is in /Programs/Glibc/Current, where Current is a link to 2.2.3, and inside Glibc's lib directory you have that libc.so.6 is in fact a link to libc-2.2.3.so. That's a lot of links right? However, libraries are acessed like this: the directory /System/Index/lib (which is not a link) is the only one stored in ldconfig's configuration (and LD_LIBRARY_PATH). There libc.so.6 points directly to /Programs/Glibc/2.2.3/lib/libc-2.2.3.so (no links in this whole path). So we have exactly one level of indirection, just as in regular Linux distributions. You may '''see''' a lot of links, but they are there mostly to ease the system's management.

Applications are also compiled with the --prefix set to their "homes" at /Programs/App/version, so when a program looks for a datafile it does not go through links. Reaching executables involves going through one link, but, unlike regular Linux distributions it does not have to search through items of a PATH (and I believe the [[ReiserFS]]'s tree structuring of a directory is more optimized than the shell's traversal through elements of $PATH. Of course, there's always the shell's hash, but then, there's always the filesystem cache).

== Why do you use GoboHide? Can't you modify all programs to live in the GoboLinux hierarchy? ==

We persuade them to cope with the GoboLinux tree with compilation options whenever possible. However, there are many programs that can't cope completely, featuring hardcoded paths in their sources and whatnot. Ultimately any free software can be patched to cope, but I'm not sure if we have enough manpower for such a task and maintain it afterwards. It would be, at the very least, a big hassle, and I generally like to reduce the applied patches to the minimum (btw, the patches I normally apply are those related to compilation with GCC3 and security patches in the base packages, usually from Linux From Scratch). At least /bin, /lib and /sbin are critical. I have made tests in a chrooted environment and it's funny to see all the weird things that happen when those are missing.

== What is /Depot? What is /Files? ==

/Depot is a "free area" to store your documents, such as media files, downloaded stuff, etc. You can think of it as a "community area", a "home for all users" (some UNIX systems have a /pub directory for this purpose). GoboLinux as a system ignores the contents of /Depot it only exists to encourage users to store their random files under a single place and keep the rest of the system clean.

/Files, on the other hand, is a standard GoboLinux directory. Inside it, there are directories such as Fonts and Plugins, where shared files that are required by applications but not necessarily part of them are kept.

== Who is Gobo? ==

Apart from Fibo, his loyal servant, no one who saw him survived to tell the story. Beyond that, we never risked digging any deeper into the subject.

== What nonsense is this? ==

Don't ask.

== Are you serious? ==

Of course not. :-) You may disregard the two questions above -- they are just one of the many internal jokes in the GoboLinux world. Gobo does not exis-- uh, what's that? AAAAAHHHH!!!!

{{Archival|2009|April|4|Kundor}}