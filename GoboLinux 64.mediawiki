This is a page to collaborate on the development of the x86_64 port of GoboLinux, and the fixing of various issues and assumptions of the i686 arch that are making it difficult so far.

The cross-compiled 64bit version is available as an image from various bittorrent trackers, requiring manual installation.

== General Issues ==

=== /lib64 ===

Various programs assume the existence of /lib64, thanks to the nice people working on the LHS. I have also seen references to /usr/lib64 and /usr/local/lib64. As such, the following should be created, pointing to /System/Links/Libraries:

* /lib64
* /usr/lib64

Will FixDirReferences and similar catch these out of the box, or will it need more work? I've seen lib64 in a few installed .la files.

Another issue is that various programs appear to create versions of libtool which *only* contain /lib64, /usr/lib64, and /usr/local/lib64 in their compile-time search paths, precisely the time that all of those are useless for its own libraries (as they are not symlinked). They then appear to try to access their own .la files, and fail, stopping Compile at the install step. This has been observed with GConf, GTK+, and libX11. In order to compile these successfully, it is necessary to alter libtool before make, and before SandboxInstall, and sometimes to attempt the change and installation step twice. This needs solving.

=== Arch-using and Binary Recipes ===

A large number of binary recipes which do not use arch directories correctly exist, and need correcting, with other arch directories adding if possible for other versions.

The GetAvailable script does not detect recipes without an arch directory for an architecture, meaning compile will detect, attempt to compile, and fail to compile, recipes or versions of recipes which lack the appropriate architecture. This is usually only a minor annoyance that can mean manually finding and specifying a version which provides the right arch directory, and simply not compiling recipes which have no versions with that arch.

=== CFLAGS/CXXFLAGS ===

x86_64 compilation of C and C++ programs requires that -fPIC be in the CFLAGS/CXXFLAGS for source files used in shared libraries. This is done correctly by programs mosty of the time, but not all, so adding it to the general CFLAGS/CXXFLAGS is required as a temporary measure. This makes ALL code, including executable code, relocatable, which has a runtime performance hit. This should probably be fixed in a patch in recipes for affected programs, and said patch submitted upstream.

'nocona' appears to be the correct value for march on my Intel Core 2 Duo, although 'core2' or something similar has apparantly been recently added. Other march values may be correct for different systems, but it will certainly require setting correctly.

=== Multilibs ===

==== Chroot ====

Ghotcom is working on this via a 32bit chroot.

==== Multilibs ====

Namegduf has a basic functional multilib system configured and functioning, using /Programs-32 and /System/Links/Libraries-32 as the secondary installation location. Settings for both 32bit and 64bit programs still go in /Programs/ProgName/Settings. It is basically operational, but without Scripts support, difficult to install software into.

===== Namegduf's Easy Four-Step Guide to Your Own Multilib System ===== 

The following steps are required to create one similar. They should be adaptable to configuring multilibs for incompatible library sets on other architectures. These instructions are based on a single completed system and may be imperfect; feel free to point out bugs and improve them.

1) Create the multilib directory structure.

Create the following directories:

* /Programs-32
* /System/Links-32
* /Files/Compile/Sources-32

And the following:

* /System/Links-32/Executables as its own directory.
* /System/Links-32/Headers as its own directory.
* /System/Links-32/Libraries as its own directory.
* /System/Links-32/* symlinked to the same directories in /S/Links, where not created as separate directories above.
* /lib32 -> /System/Links-32/Libraries
* /usr/lib32 -> /System/Links-32/Libraries


Edit /S/S/ld.so.conf, and add /System/Links-32/Libraries on a new line.

Lastly, add "multilib" to your use flags.

2) Get enough of Glibc working for a basically functional environment to compile GCC multilib.

For these instructions, you may want to use the same version of Glibc as your natively installed system, but it shouldn't matter. 2.8 is used in the example. Extract a package of that Glibc into /Programs-32.

Enter the 'lib' directory, and open "libc.so" in a text editor. Change the paths to contain /Programs-32 instead of /Programs. Do the same for "libpthread.so".

Run RescueSymlinkProgram /Programs-32/Glibc/2.8 /System/Links-32 to link it into the system, then run SymlinkProgram Glibc 2.8 -c overwrite to relink your normal version over it, as RescueSymlinkProgram always overwrites on conflict. This is how all linking must be done until Scripts is updated for multilib support.

As RescueSymlinkProgram does not expand directories properly, you will need to make one extra symlink yourself. Enter /System/Links/Headers/gnu and run "ln -s /Programs-32/Glibc/2.8/include/gnu/stubs-32.h ." to link this header in.

Lastly, enter /System/Links/Libraries and run "ln -s /System/Links-32/Libraries/ld-linux.so.2 .". This is the one 32bit library which must be found in the normal directory.

This should provide  the requirements of compiling GCC with multilibs. The following seven files are known to be needed, but a number of the other libraries linked in, which do not need adjusting, may also be required:

* Links-32/Libraries/crt1.o
* Links-32/Libraries/crti.o
* Links-32/Libraries/crtn.o
* Links-32/Libraries/libc.so (and the real files referenced by it)
* Links-32/Libraries/libpthread.so (and the real files referenced by it)
* Links-32/Libraries/ld-linux.so.2
* Links/Libraries/ld-linux.so.2
* Links/Headers/gnu/stubs-32.h

Run ldconfig, to finish.

3) Compile GCC with multilibs.

If you have completed 2 completely and successfully, this stage should go relatively smoothly. Errors and difficulties at this point were mostly due to issues with the multilib environment.

NOTE: This won't work due to GCC pre_install fixes needed. Use this recipe:

Extract a clean copy of the GCC 4.3.1 sources into /Files/Compile/Sources. Previous versions may have issues, and future versions, not being released, are untested.

Edit gcc/config/i386/t-linux64 in a text editor. Change the MULTILIB_OSDIRNAMES line to the following:

:MULTILIB_OSDIRNAMES = . ../Links-32/Libraries

Issue Compile GCC 4.3.1 as normal, using the existing sources. If all goes well, the installation should finish without error. If not, check the environment is right and prepare for some debugging fun. It is sometimes necessary to delete the source directory, and then extract and patch it again, to restart the build completely, after solving a problem.

GCC will not, at this point, work, sometimes, for some reason. Compiling using that recipe appears to work. If manually compiling or it happens to you anyway, due to an installation bug, you will need to enter /Programs/GCC/4.3.1/lib/gcc/<archdir> and move everything inside it into the directory named '4.3.1' inside it, except that directory itself. This will get 64bit compilation functioning.

You will then need to create a directory named '32' inside that '4.3.1' directory. The full path should be /Programs/GCC/4.3.1/lib/gcc/<archdir>/4.3.1/32. Enter that directory, and copy everything in /Files/Compile/Sources/gcc-4.3.1/_build/gcc/32/* into it. This should get 32bit compilation functioning.

Now, run SymlinkProgram GCC 4.3.1 to finish. You should now be able to compile 32bit and 64bit programs. Now symlink the contents of /Programs/GCC/4.3.1/lib32 into /System/Links-32/Libraries, and you should be able to run basic 32bit programs, too. Whoo.

4) Build and install 32bit Glibc properly, followed by all other libraries 32bit versions are desired of.

Before doing this, it may or may not be necessary to rebuild your 64bit BinUtils with normal options, after installing the multilibbed GCC. 32bit BinUtils are not required.

To build Glibc properly, extract the glibc-2.8.tar.lzma archive inside Sources-32, enter it, and then extract the glibc-ports-2.8.tar.lzma archive inside it.

Ensure CFLAGS contains at least -O2 and -march=<arch>, as these are required, and set CC to "gcc -m32". You may also be needed to empty LDFLAGS, this is unknown.

Create a build directory named "_build" inside the source directory, and enter it. Run the following configuration command, which is a combination of the standard parameters, from PrepareProgram, the contents of the Glibc recipe, and one extra option, --build=i686-pc-linux-gnu, which tells configure you're building it for i686/32bit x86_64:

* ../configure --prefix=/Programs-32/Glibc/2.8 --sysconfdir=/Programs/Glibc/Settings --localstatedir=/System/Variable --enable-kernel=2.6.18 --with-headers=/Files/Compile/Sources/linux-2.6.25.7/include --disable-profile --with-tls --with-__thread --libexecdir="/Programs-32/Glibc/2.8/lib" --enable-addons --build=i686-pc-linux-gnu

The CC environmental variable and that configure option are the primary requirements to build a 32bit program instead of 64bit, with the three basic PrepareProgram options and the rest copied from the recipe as the necessary options to do so manually.

If all goes well, you should now be able to issue make, and then "make install localedata/install-locales" to compile and install the 32bit Glibc properly and fully. You then need to run RescueSymlinkProgram on it, and then SymlinkProgram with -c overwrite to have the 64bit version be used everywhere they conflict.

This RescueSymlinkProgram and SymlinkProgram pair, as described in the GCC section, is imperfect and will miss files in the 32bit arch if directories collide, but remains the primary way of symlinking programs. If a directory collision occurs, it will output and error and you can add any extra symlinks manually.

At this point, you have a basically functioning multilib system. The problem is installing packages without Script updates through all the above steps, in order to get what you want.

Next up, Xorg-Lib, which has a horribly long list of components, all to be installed similar to the above into the same prefix, /Programs-32/Xorg-Lib/7.3. The basic method is the same as the one outlined above. And then anything else you need. I had some horrible libtool issues here, but made it work; I forget exactly how.

This whole thing should really be split into a "How to compile GoboLinux programs into the /Programs tree manually" guide, and a guide to building multilibs in a separate article at some point, but both pieces of information are here.

=== Packages ===

InstallPackage doesn't know not to try to use i686 packages. Needs to only use packages for its own architecture; probably related to the GetAvailable stuff mentioned in relation to arch-using and binary recipes, above.

== Recipe/Program Issues ==

=== Flash ===

Adobe Flash is entirely unavailable without use of a multiarch approach.

Attempts to compile Gnash have failed repeatedly due to the rather unstable nature of the program's CVS. The recipes need work. Separating off a couple of working revisions for Gnash and FFmpeg might be a good idea, as the recipes seem to cease to work after they change the structure of the source and installed headers, especially when one is not updated for the other.

=== GCC ===

GCC 4.3.1 compiles with --disable-multilibs passed. It initially will not work, due to the various crtbegin.o and similar files being placed in a different directory to the one it searches, and the one that the existing GCC 4.2.2 has them in. These files must be moved from lib/gcc/<archdir> to lib/gcc/<archdir>/4.3.1. Once they are moved, it functions.

GCC 4.3.1 will compile with multilibs if a patch is made to the configuration and the multilibs environment is correct. It suffers from a similar problem as above with the 32bit files, which are not installed at all and must be copied from the build directory. See the multilibs section for more details.

No other 3.x or 4.x version of GCC or GCC-Java appears to compile cleanly out of the box, even with --disable-multilib.

=== Glibc ===

Glibc 2.8 compiles cleanly, but has incorrect paths in ldd. This requires a patch adding to the recipe.

=== Java ===

The current Sun-JDK recipe does not have a x86_64 arch, and a static host for that arch's compiled version is hard to locate and have installed. Worse, their 64bit version does not have a browser plugin, making it somewhat useless.

Blackdown-JDK does not have a recipe at this time. One has been made, but it is proving exceedingly buggy and tends to crash the browser with only a brief glimpse of the functioning applet, and has not yet been submitted.

IcedTea has a dependency list longer than OpenOffice using only system libraries. These all need to be functional before it can even be attempted.

See above for GCC-Java.

=== OpenOffice ===

The current binary OpenOffice recipe does not have an x86_64 arch, and as no 64bit releases are made by them, one cannot be added.

A functioning from-source recipe is working on x86_64, but it has java disabled and apparently has bugs on the i686 arch. Testing is welcomed: http://fudgeman.org/files/Gobo/OpenOffice--3.0.0--recipe.tar.bz2

=== Skype ===

Unavailable without multilibs. Working on that bit.

== Making a bootable/installable disk ==

Maybe someone should look into this, once the above is less lengthy. It'd be great to have an ISO offered for a 64bit version of Gobo, fully functional and working.