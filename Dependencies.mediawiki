Queries dependencies in a [[GoboLinux]] package. It scans the files from a program and verifies the relations to other files through dynamic linking (using the program ldd). This way, it can identify dependency relations between packages.

== Usage ==
Usage: '''Dependencies''' { [-c] <package> [<version>] | -f <file> }

=== Options ===
* '''-h, --help'''     <br/> Shows this help.
* '''-v, --version'''  <br/> Show program version.
* '''-V, --verbose'''  <br/> Enable verbose mode.
* '''-f, --file'''     <br/> Show dependencies of one file only.
* '''-c, --check'''    <br/> Check the package's dependency file, instead of generating one.
* '''-r, --reverse'''  <br/> Reverse dependency checking: indicate which programs depend on the given program (version is taken into account if given)
* '''-a, --all'''      <br/> Inspect all files, not only those in 'bin', 'sbin' and 'lib'.
* '''-m, --missing-only''' <br/> Display missing dependencies only. (check mode only)
* '''-H, --higher-or-missing-only'''  <br/> Display missing dependencies or higher versions only. (check mode only)
* '''-l, --list'''     <br/> List dependency file, if any (generate if not present).
* '''-d, --dependencies-file'''  <br/> Do not look at parses the passed file.
* '''-e, --execute''' ''<entry>'' <br/> Execute the command on each missing/higher. (check mode only)
* '''-b, --batch'''    <br/> Batch mode: avoid asking questions.
* '''-p, --programs''' ''<entry>'' <br/> <dir> to check dependencies against.
* '''-w, --write'''    <br/> Write dependencies to Resources/Dependencies.
* '''-k, --keep-going'''  <br/> Don't quit immediately if any executed program fails (check execute mode only).

=== Notes ===
If no version is specified, Current is assumed.



== Configuring Dependencies ==
Today there are many programs implementing a given feature in different ways. One such example is the OpenGL API, with implementations floating in packages such as Xorg, MesaLib and Nvidia. However, not every user owns a Nvidia card, and here comes a problem: how should one mask Nvidia from the automated Dependencies list generated after creating a recipe? This problem is now fixed with a configurable file called <tt>/Programs/Scripts/Settings/Scripts/Dependencies.blacklist</tt>.

=== Dependencies.blacklist ===
This file allows one to specify packages that should not appear in the Dependencies file after creating a new recipe. Its format is pretty simple: one package per line, without the need to specify its version.

==== An Dependencies.blacklist example ====
The following example blacklists the packages Glibc and Nvidia. Comments and blank lines are ignored by the parser, so it's ok to include them.
<blockquote>
# Dependencies.blacklist is documented in detail at <br/>
#  http://wiki.gobolinux.org/Dependencies <br/>
 <br/>
Glibc <br/>
Nvidia <br/>
</blockquote>

Note: presently blacklisting specific versions is not supported, but the same behaviour can be achieved by creating an empty directory in the <tt>/Programs</tt> directory.  For example, to blacklist GCC version 4.1.2 you may:
<blockquote>
mkdir /Programs/GCC/4.1.2 <br/>
</blockquote>
